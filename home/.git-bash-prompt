echo 'Loading git bash prompt extension...'


git_check_changes ()
{
git status | sed -n '
1h
1!H
$ {
  g
  s/Untracked files:/\?/
  s/Changed but not updated/\*/
  s/Changes to be committed/\^/
  s/[^\^\?*]//g
  p
}
'
}

git_remote_changes ()
{
local branch="$(git branch | grep '^*' | sed -e 's/^\* *//')"
git log --pretty=oneline $branch...origin/$branch 2>/dev/null | sed -n '
1h
1!H
$ {
  g
  s/.*/>/g
p
}
'
}

# Lars: a copy of the __git_ps1 script for git-completion.bash modified to add
# ? - untracked files
# * - changed but not added to commit
# ^ - changed and to be committed
git_bash_prompt ()
{
        local g="$(git rev-parse --git-dir 2>/dev/null)"
        if [ -n "$g" ]; then
                local r
                local b
                if [ -d "$g/../.dotest" ]
                then
                        if test -f "$g/../.dotest/rebasing"
                        then
                                r="|REBASE"
                        elif test -f "$g/../.dotest/applying"
                        then
                                r="|AM"
                        else
                                r="|AM/REBASE"
                        fi
                        b="$(git symbolic-ref HEAD 2>/dev/null)"
                elif [ -f "$g/.dotest-merge/interactive" ]
                then
                        r="|REBASE-i"
                        b="$(cat "$g/.dotest-merge/head-name")"
                elif [ -d "$g/.dotest-merge" ]
                then
                        r="|REBASE-m"
                        b="$(cat "$g/.dotest-merge/head-name")"
                elif [ -f "$g/MERGE_HEAD" ]
                then
                        r="|MERGING"
                        b="$(git symbolic-ref HEAD 2>/dev/null)"
                else
                        if [ -f "$g/BISECT_LOG" ]
                        then
                                r="|BISECTING"
                        fi
                        if ! b="$(git symbolic-ref HEAD 2>/dev/null)"
                        then
                                if ! b="$(git describe --exact-match HEAD 2>/dev/null)"
                                then
                                        b="$(cut -c1-7 "$g/HEAD")..."
                                fi
                        fi
                fi

                if [ -n "$1" ]; then
                        printf "$1" "${b##refs/heads/}$r"
                else
                        printf " (%s$(git_check_changes)$(git_remote_changes))" "${b##refs/heads/}$r"
                fi
        fi
}


# Lars: this is a good prompt but it's hella slow
ps_scm_f() {
    local s=
    if [[ -d ".svn" ]] ; then
        local r=$(svn info | sed -n -e '/^Revision: \([0-9]*\).*$/s//\1/p' )
        s="(r$r$(svn status | grep -q -v '^?' && echo -n "*" ))"
    else
        local d=$(git rev-parse --git-dir 2>/dev/null ) b= r= a=
        if [[ -n "${d}" ]] ; then
            if [[ -d "${d}/../.dotest" ]] ; then
                if [[ -f "${d}/../.dotest/rebase" ]] ; then
                    r="rebase"
                elif [[ -f "${d}/../.dotest/applying" ]] ; then
                    r="am"
                else
                    r="???"
                fi
                b=$(git symbolic-ref HEAD 2>/dev/null )
            elif [[ -f "${d}/.dotest-merge/interactive" ]] ; then
                r="rebase-i"
                b=$(<${d}/.dotest-merge/head-name)
            elif [[ -d "${d}/../.dotest-merge" ]] ; then
                r="rebase-m"
                b=$(<${d}/.dotest-merge/head-name)
            elif [[ -f "${d}/MERGE_HEAD" ]] ; then
                r="merge"
                b=$(git symbolic-ref HEAD 2>/dev/null )
            elif [[ -f "${d}/BISECT_LOG" ]] ; then
                r="bisect"
                b=$(git symbolic-ref HEAD 2>/dev/null )"???"
            else
                r=""
                b=$(git symbolic-ref HEAD 2>/dev/null )
            fi

            if git status | grep -q '^# Changed but not updated:' ; then
                a="${a}*"
            fi

            if git status | grep -q '^# Changes to be committed:' ; then
                a="${a}+"
            fi

            if git status | grep -q '^# Untracked files:' ; then
                a="${a}?"
            fi

            b=${b#refs/heads/}
            b=${b// }
            [[ -n "${r}${b}${a}" ]] && s="(${r:+${r}:}${b}${a:+ ${a}})"
        fi
    fi
    s="${s}${ACTIVE_COMPILER}"
    s="${s:+${s} }"
    echo -n "$s"
}
# \h:\W \u\$
PS1='\h:\W \u$(git_bash_prompt)\$ '
